#!/bin/sh
readonly cgroups='cpu,cpuacct,memory'
readonly btrfs_path='/var/shocker'
readonly dirname=$(dirname "$(readlink -f "$0")")

#shellcheck disable=SC1090
. "$dirname"/utils.sh

usage () {
cat << USAGE
  shocker-start - create and/or run a container

  Usage: shocker start <image|container> <command>

  Options:
   -h, --help output usage information

  Examples:
   $ shocker start img_1234 ash   # create a container and run ash shell
   $ shocker start ps_33111 ash   # create a container and run ash shell
   $ shocker image create . archive.tgz # create a new image from current dir
                                        # with archive.tgz layed over it
USAGE
}

[ "$#" -eq 0 ] && { usage; exit 1; }
case "$1" in
  -h|--help ) usage && exit 1 ;;
esac

shocker_create_network() {
  readonly BRIDGE_DEV="$(get_bridge_dev)"
  readonly OUTBOUND_DEV="$(get_outbound_dev)"
  readonly GATEWAY="$(get_gateway)"
  readonly NETWORK="$(get_network)"
  readonly MASK="$(get_mask)"

  readonly cntid=$1
  readonly uuid="$(echo "$cntid" | sed 's/^ps_//')"
  readonly ip="$(int_to_ip "$(echo "$NETWORK $uuid + p" | dc)")"
  readonly mac="$(int_to_mac "$uuid")"
  readonly gwip="$(int_to_ip "$GATEWAY")"

  ip link show "$BRIDGE_DEV" 2>/dev/null
  if [ "$?" -ne 0 ]; then
    ip link add "$BRIDGE_DEV" type bridge
    ip addr add "$(int_to_ip "$GATEWAY")/$MASK" dev "$BRIDGE_DEV"
    ip link set "$BRIDGE_DEV" up
  fi

  iptables -t nat -C POSTROUTING -s "$(int_to_ip "$NETWORK")/$MASK" \
      -o "$OUTBOUND_DEV" -j MASQUERADE 2>/dev/null
  if [ "$?" -ne 0 ]; then
    iptables -t nat -A POSTROUTING -s "$(int_to_ip "$NETWORK")/$MASK" \
        -o "$OUTBOUND_DEV" -j MASQUERADE 2>/dev/null
  fi

  ip netns add netns_"$cntid"
  ip link add dev veth0_"$cntid" type veth peer name veth1_"$cntid"
  ip link set dev veth0_"$cntid" up
  ip link set veth0_"$cntid" master "$BRIDGE_DEV"
  ip link set veth1_"$cntid" netns netns_"$cntid"
  ip netns exec netns_"$cntid" ip link set dev lo up
  ip netns exec netns_"$cntid" ip link set veth1_"$cntid" address "$mac"
  ip netns exec netns_"$cntid" ip addr add "$ip/$MASK" dev veth1_"$cntid"
  ip netns exec netns_"$cntid" ip link set dev veth1_"$cntid" up
  ip netns exec netns_"$cntid" ip route add default via "$gwip"

  echo "$gwip"
}

shocker_create_mounts() {
  # create bind mounts for devpts
  mount -o bind /dev/pts "$btrfs_path/$1/dev/pts"
}

shocker_create_cgroups() {
  readonly cntid=$1
  # create and set cgroup limits
  cgcreate -g "$cgroups:/$cntid"
  cgset -r cpu.shares=512 "$cntid"
  cgset -r memory.limit_in_bytes=536870912 "$cntid"
}

shocker_log_command() {
  readonly cntid=$1
  shift
  # log command to container
  echo "$@" >> "$btrfs_path/$cntid/${cntid}.cmd"
}

shocker_pre_create() {
  readonly NHOSTS="$(get_nhosts)"

  readonly uuid=$(gen_uuid "$NHOSTS")
  readonly cntid="ps_$uuid"

  if [ "$#" -le 1 ]; then
    printf "Incorrect argument count\n" >&2
    exit 1
  fi

  if [ -z "$uuid" ]; then
    printf 'No more container id space for this subnet mask\n' >&2
    exit 1
  fi

  shocker_exists "$1"
  if [ "$?" -ne 0 ]; then
    printf "No image named '%s' exists\n" "$1" >&2
    exit 1
  fi

  shocker_exists "$cntid"
  if [ "$?" -eq 0 ]; then
    printf "UUID conflict, '%s' already exists\n" "$cntid" >&2
    exit 1
  fi

  readonly gwip=$(shocker_create_network "$cntid")
  btrfs subvolume snapshot "$btrfs_path/$1" "$btrfs_path/$cntid" > /dev/null
  shocker_create_mounts "$cntid"
  shocker_log_command "$cntid" "$@"

  # copy init scripts
  echo nameserver "$gwip" > "$btrfs_path/$cntid/etc/resolv.conf"
  cp "$dirname/init" "$btrfs_path/$cntid/root/init"

  # create hierarchy id for container
  #shellcheck disable=SC2094
  echo "$(cat "$btrfs_path/$cntid/.tree")" "$(date +%s)" "$cntid" "$@" \
      | md5sum | cut -f1 -d' ' >> "$btrfs_path/$cntid/.tree"

  shocker_create_cgroups "$cntid"

  echo "$cntid"
}

shocker_post_create() {
  findmnt -r | grep "^$btrfs_path/$1/" | cut -f1 -d' ' | xargs umount
  ip link del dev veth0_"$1"
  ip netns del netns_"$1"
  cgdelete -g "$cgroups:/$1" >/dev/null 2>&1 /dev/null
}

shocker_execute() {
  readonly cntid="$1"
  shift;
  cgexec -g "$cgroups:$cntid" \
    ip netns exec netns_"$cntid" \
    unshare -fmuip --mount-proc \
    chroot "$btrfs_path/$cntid" \
    /sbin/init
    #/bin/sh -c "source /root/init; $*"
}

shocker_restart() {
  readonly cntid=$1

  if [ "$#" -le 1 ]; then
    printf "Incorrect argument count\n" >&2
    exit 1
  fi

  shocker_exists "$1"
  if [ "$?" -ne 0 ]; then
    printf "No image named '%s' exists\n" "$1" >&2
    exit 1
  fi

  shocker_create_network "$cntid"
  shocker_create_mounts "$cntid"
  shocker_log_command "$cntid" "$@"
  shocker_create_cgroups "$cntid"

  shocker_execute "$cntid" "${@:2}"

  shocker_post_create "$cntid"
}

shocker_create() {
  readonly cntid=$(shocker_pre_create "$@") || exit 1
  shocker_execute "$cntid" "${@:2}"
  shocker_post_create "$cntid"
}

shocker_exec() {
  fn_mine () {
    xargs ps ho pid,command \
      < "/sys/fs/cgroup/cpu/$1/tasks" \
      | awk '$2 == "init" {print $1}'
  }

  readonly cid="$(fn_mine "$1")"
  nsenter -t "$cid" -m -u -i -n -p chroot "$btrfs_path/$1" "${@:2}"
}

shocker_cleanup() {
  #shellcheck disable=SC2012
  ls -rtd "$btrfs_path"/ps_* | while read -r ps; do
    readonly ps=$(basename "$ps")
    if [ "$(get_state "$ps")" = "crashed" ]; then
      findmnt -r | grep "^$ps/" | cut -f1 -d' ' | xargs umount
      ip link del "veth0_$ps" >/dev/null 2>&1
      ip netns del "netns_$ps" >/dev/null 2>&1
      cgdelete -g "$cgroups:/$ps" >/dev/null 2>&1
      printf "Cleaned '%s'\n" "$ps"
    fi
  done
}

readonly cstate=$(get_state "$1")
readonly ctype=$(get_type "$1")

case "$ctype" in
  image    ) shocker_create "$@" ;;
  container)
    case "$cstate" in
      running) shocker_exec "$@" ;;
      stopped) shocker_restart "$@" ;;
      crashed) shocker_cleanup; shocker_restart "$@" ;;
      missing) printf "Container '%s' does not exist\n" "$1" >&2; exit 1 ;;
      *      ) usage; exit 1 ;;
    esac ;;
  unknown  ) printf "Can not determine type of '%s'\n" "$1" >&2; exit 1 ;;
  *        ) usage; exit 1 ;;
esac
