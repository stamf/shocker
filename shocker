#!/usr/bin/env bash
set -o errexit -o nounset -o pipefail
shopt -s nullglob
btrfs_path='/var/shocker'
cgroups='cpu,cpuacct,memory'

dirname=$(dirname "$(readlink -f "$0")")
repo="$dirname/../.shocker-repo"

if [ $# -gt 0 ]; then
  while [ "${1:0:2}" = '--' ]; do
    OPTION=${1:2}
    if [[ $OPTION =~ = ]]; then
      declare "SHOCKER_${OPTION/=*/}=${OPTION/*=/}"
    else
      declare "SHOCKER_${OPTION}=x"
    fi
    shift
  done
fi

# check if btrfs is mounted and available
set +e
if [ ! -d "$btrfs_path" ]; then
  printf '%s does not exist, creating:\n' "$btrfs_path" >&2
  mkdir -p "$btrfs_path"
fi
sudo btrfs filesystem show "$btrfs_path" > /dev/null
if [ "$?" -ne 0 ]; then
  printf 'Error: %s is not a btrfs filesystem\n' "$btrfs_path" >&2
  exit 1
fi
set -e

# source utility functions
. "$dirname"/utils.sh

usage () {
cat << USAGE
  Usage: shocker [options] <command>

  commit, cleanup, exec, export, images,
  init, kill, limit, logs, name, ps,
  pull, rm, route, run, spawn, stop

  Options:
    -h, --help     output usage information
    -v, --version  output version information

  Examples:
    $ shocker pull -h              # output usage for the pull command
    $ shocker pull alpine latest   # fetch the latest alpine linux image
    $ shocker images               # list local images
    $ shocker run img_1235 ash     # start an ash shell from an image
USAGE
}

shocker_pre_run() {
  BRIDGE_DEV="$(get_bridge_dev)"
  GATEWAY="$(get_gateway)"
  NETWORK="$(get_network)"
  NHOSTS="$(get_nhosts)"
  MASK="$(get_mask)"

  uuid=$(gen_uuid "$NHOSTS")
  cntid="ps_$uuid"

  if [ -z "$uuid" ]; then
    printf 'No more container id space for this subnet mask\n' >&2
    exit 1
  fi
  if [ "$(shocker_check "$1")" = 1 ]; then
    echo "No image named '$1' exists" >&2
    exit 1
  fi
  if [ "$(shocker_check "$cntid")" = 0 ]; then
    echo "UUID conflict, retrying..." >&2
    exit 1
  fi

  ip="$(int_to_ip $((NETWORK + uuid)))"
  mac="$(int_to_mac "$uuid")"
  gwip="$(int_to_ip "$GATEWAY")"

  ip netns add netns_"$cntid"
  ip link add dev veth0_"$cntid" type veth peer name veth1_"$cntid"
  ip link set dev veth0_"$cntid" up
  ip link set veth0_"$cntid" master "$BRIDGE_DEV"
  ip link set veth1_"$cntid" netns netns_"$cntid"
  ip netns exec netns_"$cntid" ip link set dev lo up
  ip netns exec netns_"$cntid" ip link set veth1_"$cntid" address "$mac"
  ip netns exec netns_"$cntid" ip addr add "$ip/$MASK" dev veth1_"$cntid"
  ip netns exec netns_"$cntid" ip link set dev veth1_"$cntid" up
  ip netns exec netns_"$cntid" ip route add default via "$gwip"

  btrfs subvolume snapshot "$btrfs_path/$1" "$btrfs_path/$cntid" > /dev/null

  mount -o bind /dev/pts "$btrfs_path/$cntid/dev/pts"
  echo nameserver "$gwip" > "$btrfs_path/$cntid/etc/resolv.conf"
  echo "$ip" > "$btrfs_path/$cntid/host-ip-addr"
  echo "$@"  > "$btrfs_path/$cntid/${cntid}.cmd"
  cp init "$btrfs_path/$cntid/root/init" || true

  cgcreate -g "$cgroups:/$cntid"
  : "${SHOCKER_CPU_SHARE:=512}"
  cgset -r cpu.shares="$SHOCKER_CPU_SHARE" "$cntid"
  : "${SHOCKER_MEM_LIMIT:=512}"
  cgset -r memory.limit_in_bytes="$((SHOCKER_MEM_LIMIT * 1048576))" "$cntid"
  #"${SHOCKER_KMEM_LIMIT:=32}"
  # cgset \
  # -r memory.kmem.limit_in_bytes="$((SHOCKER_KMEM_LIMIT * 1048576))" "$cntid"
  #"${SHOCKER_MEMSW_LIMIT:=$SHOCKER_MEM_LIMIT}"
  # cgset \
  #-r memory.memsw.limit_in_bytes="$((SHOCKER_MEMSW_LIMIT * 1048576))" "$cntid"

  echo "$cntid"
}

shocker_post_run() {
  findmnt -r | grep "^$btrfs_path/$1/" | cut -f1 -d' ' | xargs umount || true
  ip link del dev veth0_"$1"
  ip netns del netns_"$1"
  cgdelete -g "$cgroups:/$1" &> /dev/null || true
}

#HELP Create a container:
#SHOCKER spawn <image_id> <env> <nix-image> <conf-file>
shocker_spawn() {
  cntid=$(shocker_pre_run "$@")

  service="$3"
  instance_tag="$btrfs_path/$cntid/var/tmp/instance-tag"
  service_config="$btrfs_path/$cntid/etc/service-config"

  tar xzf "$repo/${service}.tgz" -C "$btrfs_path/$cntid"
  pushd "$repo/api-config-files" >/dev/null || exit
  mkdir -p "$btrfs_path/$cntid/etc/service-config"
  git archive master \
    | tar -x --strip-components=2 -C "$service_config" "$service/$2"
  popd >/dev/null

  now=$(date +%s.%N)
  ipaddr=$(cat "$btrfs_path/$cntid/host-ip-addr")
  printf '%s\t%s\t%s\t%s\t%s' "$now" "$2" "$service" "$ipaddr" \
    > "$instance_tag"

  shocker_execute "$cntid" "$service" -c "/etc/service-config/$4" || true
  rm -f "$instance_tag"

  shocker_post_run "$cntid"
}

#HELP Create a container:\nSHOCKER run <image_id> <command>
shocker_run() {
  cntid=$(shocker_pre_run "$@")
  shocker_execute "$cntid" "${@:2}" || true
  shocker_post_run "$cntid"
}

[ "$#" -ne 0 ] || { usage; exit 1; }
case "$1" in
  -h|--help ) usage && exit 0 ;;
  commit    ) shift && "$dirname/shocker-commit" "$@" ;;
  cleanup   ) shift && "$dirname/shocker-cleanup" "$@" ;;
  exec      ) shift && "$dirname/shocker-exec" "$@" ;;
  export    ) shift && "$dirname/shocker-export" "$@" ;;
  images    ) shift && "$dirname/shocker-images" "$@" ;;
  init      ) shift && "$dirname/shocker-init" "$@" ;;
  kill      ) shift && "$dirname/shocker-kill" "$@" ;;
  limit     ) shift && "$dirname/shocker-limit" "$@" ;;
  logs      ) shift && "$dirname/shocker-logs" "$@" ;;
  name      ) shift && "$dirname/shocker_name" "$@" ;;
  ps        ) shift && "$dirname/shocker-ps" "$@" ;;
  pull      ) shift && "$dirname/shocker-pull" "$@" ;;
  rm        ) shift && "$dirname/shocker-rm" "$@" ;;
  route     ) shift && "$dirname/shocker-route" "$@" ;;
  run       ) shift && shocker_run "$@" ;;
  spawn     ) shift && shocker_spawn "$@" ;;
  stop      ) shift && "$dirname/shocker-stop" "$@" ;;
  *         ) shift && "$dirname/shocker-help" && exit 1 ;;
esac
